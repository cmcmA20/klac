* стандартные прокашливания
#+begin_src agda2

{-# OPTIONS --safe #-}
module Day2 where



open import Data.Empty using (⊥; ⊥-elim)
open import Data.Nat using (ℕ; zero; suc)
open import Data.Sum using (_⊎_; inj₁; inj₂)
open import Data.Unit using (⊤; tt)
open import Structures.??? using (¬_)

#+end_src

* ~M-x~ describe-char
Пользователям emacs привет, остальным соболезную.

* First-order logic and constructivity
Пока мы видели, что агда как минимум позволяет выражать *конструктивную* /логику высказываний (propositional logic)/.
Теперь убедимся в том, что фичи /логики первого порядка/ тоже доступны.

Пример из аримфметики. Не существует самого большого натурального числа:
~¬∃m. ∀n. m > n~
Пример из матанализа. Функция ~f~ на метрическом пространстве ~(M, d)~ называется сжимающим отображением, если
~∃(k ∈ [0;1)). ∀x y. d(f(x), f(y)) ≤ k d(x, y)~

[[./quantifiers.png]]
Почитайте параграф 1.11 из [[https://homotopytypetheory.org/book/][HoTT book]], чтобы узнать более детально.

** Квантор всеобщности
~∀x. P(x)~ читается как "для любого ~x~ верно ~P(x)~".
В теории типов такая штука называется ~Π~ ("пи" или /зависимая функция/, /зависимое произведение/),
в агде просто стрелка ~→~. Импликация является частным случаем ~Π~, когда ~P~ реально не зависит от ~x~.

** Квантор существования
~∃x. P(x)~ читается как "существует ~x~ такой, что ~P(x)~ верно".
В теории типов называется ~Σ~ ("сигма" или /зависимая пара/, /зависимая сумма/), в агде так и записывается.
Конъюнкция является частным случаем ~Σ~ при тех же условиях.

Запишем первый пример, который из арифметики:
#+begin_src agda2

_>_ : ℕ → ℕ → Type₀
zero  > n     = ⊥
suc _ > zero  = ⊤
suc m > suc n = m > n

-- \:4
arith-quantifier-example : ¬ (Σ[ m ∈ ℕ ] Π[ n ∈ ℕ ] (m > n))
arith-quantifier-example (m , f) = lemma m (f m)
  where
  lemma : (k : ℕ) → k > k → ⊥
  lemma zero    ()
  lemma (suc k) prf = lemma k prf

#+end_src

* Конструктивность и разрешимость
- определить понятия ~_>_~ и ~_≤_~ для натуральных чисел
#+begin_src agda2

_≤_ : ℕ → ℕ → Type₀
m ≤ n = ¬ (m > n)

id : {A : Type₀} → A → A
id x = x

th₁ : Π[ m ∈ ℕ ] Π[ n ∈ ℕ ] ((m > n) ⊎ (m ≤ n))
th₁ zero _ = inj₂ id
th₁ (suc m) zero    = inj₁ tt
th₁ (suc m) (suc n) = th₁ m n

Dec′ : Type ℓ → Type _
Dec′ A = A ⊎ (¬ A)

>-dec : Π[ m ∈ ℕ ] Π[ n ∈ ℕ ] Dec′ (m > n)
>-dec = th₁ 

-- "Любое утверждение разрешимо", такое доказать нельзя
-- LEM : Π A ꞉ Type₀ , Dec A
-- LEM A = {!!}

#+end_src
- если зафиксировать какое-то ~m : ℕ~, то для любого ~n : ℕ~ оно либо больше ~m~, либо нет
- LEM

Если хотите ещё более поразбираться в логических штуках на агде, рекомендую [[https://serokell.io/blog/logical-background][пост Дани Рогозина]].
