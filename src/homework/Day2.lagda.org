#+begin_src agda2

module homework.Day2 where

open import Prelude
open import Day2 using (Dec′; _>_)

open import Data.List using (List; []; _∷_; _++_)
open import Relation.Nullary using (¬_)
open import Data.Nat using (ℕ; zero; suc)

#+end_src

* Задача 1 (★)
Вспомните определение списков и по аналогии создайте следующие типы данных:
  - Бинарные деревья, хранящие произвольные данные в листьях.
  - Бинарные деревья, хранящие произвольные данные в узлах.
#+begin_src agda2

data Treeₗ (A : Type₀) : Type₀ where
  -- заполните конструкторы

data Treeₙ (A : Type₀) : Type₀ where
  -- заполните конструкторы

#+end_src

* Задача 2 (★)
Напиишите функции обхода (left to right) для таких деревьев, чтобы собрать
содержимое дерева в список.
#+begin_src agda2

traverseₗ : {A : Type₀} → Treeₗ A → List A
traverseₗ = {!!}

traverseₙ : {A : Type₀} → Treeₙ A → List A
traverseₙ = {!!}

#+end_src

* Задача 3 (★★★)
В Haskell можно встретить функцию ~$~, позволяющую не писать лишние скобки,
применяя несколько функций одну за другой. В языке с зависимыми типами её
сигнатура более общая. Попробуйте написать максимально общую сигнатуру для
оператора композиции функций.
#+begin_src agda2

-- non-dependent
_$ₕ_ : {A B : Type₀} → (A → B) → A → B
f $ₕ x = f x

-- dependent
_$_ : {A : Type₀} {B : A → Type₀} → (f : (a : A) → B a) → (x : A) → B x
f $ x = f x

-- non-dependent
_∘ₕ_ : {A B C : Type₀} → (B → C) → (A → B) → (A → C)
(g ∘ₕ f) x = g (f x)

-- dependent
_∘_ : {!!}
(g ∘ f) x = g (f x)

#+end_src
Эту задачу Thierry Coquand давал кому-то на защите диплома :-)

* Задача 4 (★★)
Теперь мы знаем, почему не удалось доказать половинку тавтологии ~contra~ из
прошлого дз. Попробуйте доказать её, используя закон исключённого третьего.

#+begin_src agda2

contra′ : {A B : 𝓤₀} → (lem : (Π[ X ∈ 𝓤₀ ] Dec′ X)) → (¬ B → ¬ A) → (A → B)
contra′ = {!!}

#+end_src

* Задача 5 (★★★)
Готтфрид Лейбниц характеризовал равенство таким образом:
для любых ~x~ и ~y~, они равны тогда и только тогда, когда для любого предиката ~P~,
~P(x)~ логически эквивалентно ~P(y)~.

Сформулируйте это равенство и покажите, что из равенства по Лейбницу следует и наше
обычное определение равенства, и наоборот.

#+begin_src agda2

_≡ₗ_ : {A : Type₀} → (x y : A) → Type₁
_≡ₗ_ {A} x y = {!!}

leibniz-to-martin-löf : {A : Type₀} (x y : A) → x ≡ₗ y → x ≡ y
leibniz-to-martin-löf = {!!}

martin-löf-to-leibniz : {A : Type₀} (x y : A) → x ≡ y → x ≡ₗ y
martin-löf-to-leibniz = {!!}

#+end_src

* Задача 6 (★★)
Определите свойства чётности и нечётности для натуральных чисел. Покажите, что
чётность разрешима для любого натурального числа.

#+begin_src agda2

Even : ℕ → Type₀
Even n = {!!}

Odd : ℕ → Type₀
Odd n = {!!}

even-dec : Π[ n ∈ ℕ ] Dec′ (Even n)
even-dec = {!!}

#+end_src

* Задача 7 (★★)
Теперь вы сможете попробовать доказать следующую теорему:
#+begin_src agda2

hmm : Π[ m ∈ ℕ ] Π[ n ∈ ℕ ] (Even m × Even n × (n > m) → (Σ[ k ∈ ℕ ] ((k > m) × (n > k) × Odd k)))
hmm = {!!}

#+end_src
