* —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–∫–∞—à–ª–∏–≤–∞–Ω–∏—è
#+begin_src agda2

{-# OPTIONS --safe --guardedness #-}
module Day3 where


open import Day2 using (Dec‚Ä≤)

open import Data.Bool using (false; true; if_then_else_)
  renaming (Bool to ùîπ)
open import Data.Nat using (‚Ñï; zero; suc; _*_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Structures.??? using (Dec; yes; no)

#+end_src

* It's Bool again
–†–∞–∑—Ä–µ—à–∏–º—ã–µ —Ç–∏–ø—ã –º–æ–≥—É—Ç –±—ã—Ç—å "—É—Ö—É–¥—à–µ–Ω—ã" –¥–æ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∫–∏–Ω—É—Ç—å —Å–∞–º–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
–û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ: –í Coq –µ—Å—Ç—å SSReflect, –≤ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –∫–∞–∫ —Ä–∞–∑ –ª–µ–∂–∏—Ç –ø–æ–Ω—è—Ç–∏–µ /boolean reflection/.
–û–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–æ–Ω—Ü–µ–ø—Ç–∞.

#+begin_src agda2

dec‚Ä≤-to-dec : {A : Type ‚Ñì} ‚Üí Dec‚Ä≤ A ‚Üí Dec A
dec‚Ä≤-to-dec (inj‚ÇÅ a) = yes a
dec‚Ä≤-to-dec (inj‚ÇÇ ¬¨a) = no Œª x ‚Üí ¬¨a x

forget-evidence : {A : Type ‚Ñì} ‚Üí Dec A ‚Üí ùîπ
forget-evidence (yes _) = true
forget-evidence (no _) = false

from-boolean-reflection : {A : Type ‚Ñì} (d : Dec A) ‚Üí forget-evidence d ‚â° true ‚Üí A 
from-boolean-reflection (yes a) _ = a

to-boolean-reflection : {A : Type ‚Ñì} (d : Dec A) ‚Üí A ‚Üí forget-evidence d ‚â° true
to-boolean-reflection (yes _)  _ = refl
to-boolean-reflection (no ¬¨p) x with ¬¨p x
... | ()

#+end_src

* –ì–∏–±–∫–æ—Å—Ç—å –∑–∞–≤—Ç–∏–ø–æ–≤: —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–æ–≤, –º–∏–Ω—É—Ç–∫–∞ –ø—Ä–∏–∫–æ–ª–æ–≤ ‚Äî javascript style
–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å ~_>_~ –∫–∞–∫ –∏–Ω–¥—É–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–∏–∫–∞—Ç, –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å.

#+begin_src agda2

data _>·µ¢_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Type‚ÇÄ where
  sz : {n : ‚Ñï  } ‚Üí          suc n >·µ¢ 0
  ss : {m n : ‚Ñï} ‚Üí m >·µ¢ n ‚Üí suc m >·µ¢ suc n

>·µ¢-dec : (m n : ‚Ñï) ‚Üí Dec (m >·µ¢ n)
>·µ¢-dec zero n = no (Œª ())
>·µ¢-dec (suc m) zero = yes sz
>·µ¢-dec (suc m) (suc n) with >·µ¢-dec m n
... | yes x  = yes (ss x)
... | no  ¬¨x = no (Œª { (ss prf) ‚Üí ¬¨x prf})

_>·µ£_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
m >·µ£ n = forget-evidence (>·µ¢-dec m n)

-- if (n > 0) { return (n * n); } else return false
javascriptIsFun : (n : ‚Ñï) ‚Üí if n >·µ£ 0 then ‚Ñï else ùîπ
javascriptIsFun n with n >·µ£ 0
... | true  = n * n
... | false = false

-- too lazy to fix this
-- ‚áî-preserves-Dec : {P Q : Type ‚Ñì} ‚Üí (P ‚áî Q) ‚Üí (Dec P ‚áî Dec Q)
-- proj‚ÇÅ (‚áî-preserves-Dec (p‚áíq , q‚áíp)) (yes x) = yes (p‚áíq x)
-- proj‚ÇÅ (‚áî-preserves-Dec (p‚áíq , q‚áíp)) (no ¬¨x) = no Œª z ‚Üí ¬¨x (q‚áíp z)
-- proj‚ÇÇ (‚áî-preserves-Dec (p‚áíq , q‚áíp)) (yes x) = yes (q‚áíp x)
-- proj‚ÇÇ (‚áî-preserves-Dec (p‚áíq , q‚áíp)) (no ¬¨x) = no (Œª z ‚Üí ¬¨x (p‚áíq z))

>·µ¢-prop : (m n : ‚Ñï) ‚Üí isProp (m >·µ¢ n)
>·µ¢-prop (suc m) zero    sz     sz     = refl
>·µ¢-prop (suc m) (suc n) (ss x) (ss y) = cong ss (>·µ¢-prop m n x y)

#+end_src

* –ö–æ–∏–Ω–¥—É–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã (~record~)

#+begin_src agda2

record TheBox : Type‚ÇÄ where
  coinductive
  field
    finished : ùîπ
    pushTheButton : if finished then ‚Ñï else TheBox

zBox : (n : ‚Ñï) ‚Üí TheBox
zBox n = record { finished = true ; pushTheButton = n }

wBox : (n : ‚Ñï) ‚Üí TheBox
wBox n = helper n n
  where
  helper : ‚Ñï ‚Üí ‚Ñï ‚Üí TheBox
  helper zero    m = record { finished = true ; pushTheButton = m }
  helper (suc n) m = record { finished = false ; pushTheButton = helper n m }

strangeOne : TheBox
TheBox.finished strangeOne = false
TheBox.pushTheButton strangeOne = strangeOne

record Stream (A : Type ‚Ñì) : Type ‚Ñì where
  coinductive
  constructor _‚à∑_
  field
    h : A
    t : Stream A
open Stream public

-- –∏–∑ –ø–æ—Ç–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å–ø–∏—Å–∫–∞
_!_ : {A : Type ‚Ñì} ‚Üí Stream A ‚Üí ‚Ñï ‚Üí A
s ! zero  = h s
s ! suc i = t s ! i

#+end_src
